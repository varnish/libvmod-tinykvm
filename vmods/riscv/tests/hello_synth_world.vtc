varnishtest "RISC-V Hello World Synth"

shell {
cat >${tmpdir}/${testname}.cpp <<-EOF
#include "riscv_api.hpp"

static void on_recv(const char* url, int req, int resp)
{
	decision("synth", 5, 404);
}

void on_synth(const char* url)
{
	if (strcmp(url, "/") == 0) {
		static const char mime[] = "text/plain";
		static const char text[] = "Hello World";
		synth(200, mime, sizeof(mime)-1, text, sizeof(text)-1);
	} else {
		static const char mime[] = "text/plain";
		static const char text[] = "Not root URL";
		synth(500, mime, sizeof(mime)-1, text, sizeof(text)-1);
	}
}

void start(int argc, char** argv) {
	register_callback(3, (void(*)())on_synth);
	wait_for_requests(on_recv);
}
EOF
bash ${testdir}/build.sh ${tmpdir}/${testname}.cpp ${testdir} ${tmpdir}/${testname}
}

varnish v1 -vcl+backend {
vcl 4.1;
	import riscv;

	backend default none;

	sub vcl_init {
		riscv.embed_tenants("""{
			"xpizza.com": {
				"filename": "${tmpdir}/${testname}",
				"group": "test"
			}
		}""");
	}

	sub vcl_recv {
		if (!riscv.fork(req.http.Host, req.http.X-Debug)) {
			return (synth(403));
		}

		/* Call into VM */
		riscv.vcall(ON_REQUEST, req.url);

		if (riscv.want_result() == "synth") {
			return (synth(riscv.want_status()));
		}

		return (synth(400));
	}
	sub vcl_synth {
		if (riscv.active()) {
			riscv.vcall(ON_SYNTH, req.url);
			return (deliver);
		}
	}
} -start

client c1 {
	txreq -url "/" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "Hello World"
	expect resp.status == 200
	txreq -url "/1" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "Not root URL"
	expect resp.status == 500
} -run

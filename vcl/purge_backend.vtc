varnishtest "ykey synthbackend serialization"

server s1 -repeat 10 {
	rxreq
	txresp
} -start

varnish v1 -vcl+backend {
	import ykey;
	import synthbackend;
	import vtc;

	sub vcl_recv {
		# Prevent others from setting X-Method
		unset req.http.X-Method;
		# Here we can do an ACL check
		if (req.method == "PURGE") {
			set req.http.X-Method = req.method;
			set req.url = "/not_cached";
			return (hash);
		}
	}

	sub vcl_backend_fetch {
		if (bereq.http.X-Method == "PURGE") {
			# Choose synthbackend as our backend for purges, in
			# order to make use of request serialization later on.
			set bereq.backend = synthbackend.from_string("Purged");

			# Simulate the purge taking a while to complete (for test)
			vtc.sleep(1s);
		}
	}

	sub vcl_backend_response {
		if (bereq.http.X-Method == "PURGE") {
			# Deliberately cause request serialization.
			# This avoids overloading the server with purges.
			set beresp.ttl = 0s;
			# Purge and return the number of soft-purged objects.
			set beresp.http.n-gone = ykey.purge_header(bereq.http.XKey-Purge, sep=" ", soft=true);
			return (deliver);
		}

		# Attach YKEY tag 'abc' to an object for test.
		set beresp.grace = 0s;
		ykey.add_key("abc");
	}

	sub vcl_deliver {
		# Inform the user about how many objects|
		# got purged
		if (req.http.X-Method == "PURGE") {
			return (synth(200, "softpurged key " + req.http.XKey-Purge + ": " + resp.http.n-gone + " objects purged"));
		}

		# .. and how many hits the object had
		set resp.http.hits = obj.hits;
	}
} -start

client c1 {
	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.hits == 0

	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.hits == 1
} -run

client c2 {
	txreq -req "PURGE" -hdr "XKey-Purge: abc"
	rxresp
	expect resp.status == 200
	expect resp.reason == "softpurged key abc: 1 objects purged"
} -start

delay 0.2

client c3 {
	txreq -req "PURGE" -hdr "XKey-Purge: abc"
	rxresp
	expect resp.status == 200
	expect resp.reason == "softpurged key abc: 0 objects purged"
} -start

client c4 {
	txreq -req "PURGE" -hdr "XKey-Purge: abc"
	rxresp
	expect resp.status == 200
	expect resp.reason == "softpurged key abc: 0 objects purged"
} -start

client c5 {
	txreq -req "PURGE" -hdr "XKey-Purge: abc"
	rxresp
	expect resp.status == 200
	expect resp.reason == "softpurged key abc: 0 objects purged"
} -start

client c6 {
	txreq -req "PURGE" -hdr "XKey-Purge: abc"
	rxresp
	expect resp.status == 200
	expect resp.reason == "softpurged key abc: 0 objects purged"
} -start

client c7 {
	txreq -req "PURGE" -hdr "XKey-Purge: abc"
	rxresp
	expect resp.status == 200
	expect resp.reason == "softpurged key abc: 0 objects purged"
} -start

client c2 -wait
client c3 -wait
client c4 -wait
client c5 -wait
client c6 -wait
client c7 -wait

client c8 {
	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.hits == 0

	txreq
	rxresp
	expect resp.status == 200
	expect resp.http.hits == 1
} -run

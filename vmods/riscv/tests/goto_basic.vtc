varnishtest "RISC-V Hello World Backend"

shell {
cat >${tmpdir}/${testname}.cpp <<-EOF
#include "riscv_api.hpp"

static const char pass[] = "pass";

void on_recv(int, int)
{
	decision(pass, sizeof(pass)-1, 0);
}

void on_backend_fetch()
{
	enum {
		GOTO_IPV_ALL  = 0,
		GOTO_IPV_IPv4 = 1,
		GOTO_IPV_IPv6 = 2
	};
	long be = goto_dns("docs.varnish-software.com", GOTO_IPV_IPv4);
	syscall(ECALL_SET_BACKEND, be);
}

void start(int argc, char** argv) {
	wait_for_requests(on_recv);
}
EOF
bash ${testdir}/build.sh ${tmpdir}/${testname}.cpp ${testdir} ${tmpdir}/${testname}
}

varnish v1 -vcl+backend {
	vcl 4.1;
	import goto;
	import riscv;

	backend default none;

	sub vcl_init {
		riscv.embed_tenants("""
			{
				"docs.varnish-software.com": {
					"filename": "${tmpdir}/${testname}",
					"group": "test"
				}
			}
		""");
	}

	sub vcl_recv {
		if (!riscv.fork(req.http.Host, req.http.X-Debug)) {
			return (synth(403));
		}

		/* Call into VM */
		riscv.vcall(ON_REQUEST);

		if (riscv.want_result() == "pass") {
			return (pass);
		} else if (riscv.want_result() == "hash") {
			return (hash);
		}

		return (synth(400));
	}

	sub vcl_backend_fetch {
		if (riscv.fork(bereq.http.Host, bereq.http.X-Debug)) {
			riscv.vcall(ON_BACKEND_FETCH);
		}
	}
} -start

client c1 {
	txreq -url "/" -hdr "Host: docs.varnish-software.com"
	rxresp
	expect resp.status == 301
} -run

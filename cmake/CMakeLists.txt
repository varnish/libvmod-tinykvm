cmake_minimum_required (VERSION 3.1.0)
project (varnish C)
#set (CMAKE_EXPORT_COMPILE_COMMANDS ON)

option(VARNISH_PLUS "Build with the varnish plus repo" ON)
option(BUILD_VMODS  "Build most VMODs in varnish lib" ON)
option(GPROF        "Enable profiling with gprof" OFF)
option(LTO_ENABLE   "Enable LTO builds" OFF)
option(MINIMAL      "Minimal build" OFF)
option(DEBUGGING    "Debugging build" OFF)
option(GCSECTIONS   "Garbage collect empty sections" OFF)
option(NATIVE       "Enable native performance" ON)
option(SANITIZE     "Enable asan/ubsan sanitizers" OFF)
option(PGO_ENABLE   "Enable profile-guided optimizations" OFF)
option(PGO_GENERATE "PGO profile generation mode" ON)
option(AUTOFDO      "Enable AutoFDO profile optimizations" OFF)
set(PROFILE "../perf.afdo" CACHE STRING "Optimization profile path")
option(LIBFUZZER    "Enable fuzzing with clang libfuzzer")
option(LIBCPP       "Enable compiling with libc++ and linking with LLD" OFF)
option(USE_LLD      "Always link with LLD" OFF)
option(SINGLE_PROCESS "Disable fork() and run in single-process mode" OFF)

set(CMAKE_C_FLAGS "-Wall -Wextra -std=c11 -O2 -g -fstack-protector-strong")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-color")

if (LTO_ENABLE)
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto -fuse-ld=lld")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -flto -fuse-ld=lld")
    else()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto=8")
    endif()
endif()

if (GPROF)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
endif()

if (DEBUGGING)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -ggdb3")
elseif (MINIMAL)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Os")
endif()

if (NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native")
endif()
if(CMAKE_BUILD_TYPE MATCHES Release)
	# workaround for GCC failing isnan checks
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-fast-math")
endif()

if (SINGLE_PROCESS)
	message(STATUS "When building in single-process mode all tests are disabled.")
endif()
if (LIBFUZZER)
	set(SANITIZE TRUE)
	set(USE_LLD  TRUE)
	set(FUZZER_CFLAGS "-fsanitize=fuzzer-no-link" "-fno-omit-frame-pointer")
	set(FUZZER_LFLAGS "-fsanitize=fuzzer,address,undefined")
endif()
if (SANITIZE)
    set(SANITIZE_FLAGS "-fsanitize=address,undefined" "-fno-omit-frame-pointer")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address,undefined")
endif()

if (PGO_ENABLE)
    set(PGO_DIR "${CMAKE_BINARY_DIR}/pgo")
	if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    	set(PGO_FLAGS "-fprofile-correction -fprofile-dir=${PGO_DIR}")
		if (PGO_GENERATE)
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-generate ${PGO_FLAGS}")
		else()
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-use ${PGO_FLAGS}")
		endif()
	elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
		# With clang we will have to merge the profdata using llvm-profdata merge
		# before we can use the profdata generated from profile-generate
		if (PGO_GENERATE)
	        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-generate=${PGO_DIR}")
	    else()
	        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-use=default.profdata")
	    endif()
	endif()
endif()

if (AUTOFDO)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fauto-profile=${CMAKE_BINARY_DIR}/${PROFILE} -g1")
endif()

if (GCSECTIONS)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffunction-sections -fdata-sections")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-gc-sections")
endif()

if (USE_LLD)
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld")
endif()

# C threadpool used by parallell fuzzer
set (THPOOL_PATH ${CMAKE_SOURCE_DIR}/../ext/C-Thread-Pool)

if (VARNISH_PLUS)
	set(VARNISH_BRANCH_DIR "varnish-cache-plus" CACHE STRING "Varnish directory name")
	set (VARNISH_FOLDER "varnish-plus")
else()
	set(VARNISH_BRANCH_DIR "varnish-cache" CACHE STRING "Varnish directory name")
	set (VARNISH_FOLDER "varnish")
endif()
set (VARNISH_PATH ${CMAKE_SOURCE_DIR}/../ext/${VARNISH_BRANCH_DIR})
# TODO: generate this folder and config.h instead
set (CONFIG_PATH ${CMAKE_SOURCE_DIR}/include)

# Most Varnish projects require Python3
find_package(Python3 COMPONENTS Interpreter)

add_subdirectory(libvarnish)
add_subdirectory(libvapi)
add_subdirectory(libvcc)
add_subdirectory(libvgz)
if (VARNISH_PLUS)
	add_subdirectory(libmse)
	add_subdirectory(jemalloc)
	set(OPENSSL_BUILD_VERSION "1.1.1e" CACHE STRING "")
	add_subdirectory(${CMAKE_SOURCE_DIR}/../ext/openssl-cmake build_openssl)
	if (USE_FASTER)
		add_subdirectory(${CMAKE_SOURCE_DIR}/../src/faster build_faster)
	endif()
	add_subdirectory(sandbox)
endif()

add_subdirectory(varnishd    build_varnishd)
add_subdirectory(varnishtest build_varnishtest)
add_subdirectory(varnishadm  build_varnishadm)
add_subdirectory(varnishlog  build_varnishlog)
add_subdirectory(varnishhist build_varnishhist)
add_subdirectory(varnishtop  build_varnishtop)
add_subdirectory(varnishncsa build_varnishncsa)
add_subdirectory(varnishstat build_varnishstat)
if (VARNISH_PLUS)
	add_subdirectory(varnishscoreboard build_scoreboard)
	add_subdirectory(mkfs.mse build_mkfs.mse)
endif()
if (BUILD_VMODS)
	if (VMOD_USE_LOCAL_VC)
		set(VARNISH_SOURCE_DIR "${VARNISH_PATH}")
	else()
		set(VARNISH_SOURCE_DIR "${VARNISH_PATH}" CACHE STRING "")
	endif()
	add_subdirectory(../vmods build_vmods)
endif()

enable_testing()
add_subdirectory(tests)

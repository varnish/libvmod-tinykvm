$Module riscv 3 "RISC-V Sandbox For VCL"

DESCRIPTION
===========

vmod_riscv allows creating ultra-low overhead virtual machines
per request directly from VCL, that runs RISC-V machine code.
Each machine lives in complete separation and cannot affect any other.
Machines communicate with Varnish using a system call API that covers
all the basic tasks that tenants want to perform.
Any programming language that is able to produce RISC-V machine code can
be used on top of this, which allows using modern programming concepts,
and complete runtime-environments.

Due to the low overhead nature of the machines, the API may be somewhat
unique, however it's intended to be used by CDNs who know what they are doing.

Example:
	sub vcl_init {
		/* Initialize some tenants from JSON */
		riscv.embed_tenants("""
			{
				"default": {
					"max_instructions": 2000000,
					"max_memory": 42000000,
					"max_heap":  4194304
				},
				"xpizza.com": {
					"filename": "/tmp/my_program",
					"group": "default"
				}
			}
		""");
	}

	sub vcl_recv {
		/* Select a tenant to handle this request */
		riscv.fork("ypizza.com");
		/* Add CDNs custom header fields */
		set req.http.X-Tenant = riscv.current_name();
		/* We can call functions directly by name */
		riscv.call("on_client_request");

		/* We can query what the machine wants to happen */
		if (riscv.want_result() == "synth") {
			/* And then do it for them */
			return (synth(riscv.want_status()));
		}

		/* If we don't like it, we can do our own thing */
		return (synth(403, "Verboten"));
	}


API
===

$Function VOID embed_tenants(STRING json)

- Load tenants directly from embedded JSON. See below.

$Function VOID load_tenants(STRING json_filepath)

- Load tenants from a JSON file in this format:

	"group_name": {
		"max_instructions": 2000000,
		"max_memory": 4194304,
		"max_heap":  4194304
	},
	"tenant_name": {
		"filename": "/path/to/program",
		"group": "groupname"
	}

- The program does not have to exist, it only needs to be
  accessible to Varnish. When a tenant sends a new program
  to Varnish, it will try to write to that location.

$Function BOOL    fork(STRING tenant, STRING debug = 0)

- Tenant names are the object names in the JSON configuration file.
- Quickly create a new tenant machine forked from a previously
  fully prepared machine, using copy-on-write mechanics.
- Returns true if the fork succeeded.

$Function BACKEND live_update(STRING tenant, BYTES max_size = 2097152)

- Update this machine using binary data received in the
  current request. If the machine fails to load, the old machine
  will be kept running.
- Tenant name must be specified to avoid accidents.

$Function BACKEND live_debug(STRING tenant, BYTES max_size = 2097152)

- Receive a binary suitable for debugging, then
  open a port for GDB remote debugging.
- A temporary tenant name is returned in the response.


$Function BOOL    active()

- Returns true if there is a currently active tenant.

$Function INT     vcall(ENUM {
		ON_REQUEST,
		ON_HASH,
		ON_SYNTH,
		ON_BACKEND_FETCH,
		ON_BACKEND_RESPONSE,
		ON_BACKEND_ERROR,
		ON_DELIVER,
		ON_LIVE_UPDATE,
		ON_RESUME_UPDATE
		} index = "ON_REQUEST")

- Calls the given function at index in order added by add_known_function
  (starting at zero), in the currently active machine.
  Req/resp HTTP index arguments are added to the call.

$Function INT     resume()

- Resumes a paused tenant machine.

$Function STRING  current_name()

- Returns the name of the currently active machine.
- If no machine has been running in the current stage of VCL,
  this function will return null, which can be tested in if statements.

$Function STRING  current_group()

- Returns the group of the currently active machine.
- If no machine has been running in the current stage of VCL,
  this function will return null, which can be tested in if statements.

$Function BOOL    apply_hash()

- Tries to apply any previously computed hash.
- Must be called from vcl_hash.
- Returns true if there was a previously computed hash.
- Always returns false if no active tenant program.

$Function STRING  want_result()

- Returns the VCL decision that the guest wants to happen:
  Lookup, Synth, etc.

$Function INT     want_status()

- Returns the status code that the guest wants to use, if relevant.
- Returns zero (0) if no status has been set.

$Function INT     result_value(INT index)

- Returns a special result value that the guest VM can set.
- Returns zero (0) if no status has been set.

$Function STRING  result_as_string(INT index)

- Returns the a special result value that the guest VM can set.
- Returns NULL (0) if no status has been set.

$Function BOOL    want_resume()

- Returns true if the machine was paused, and may be resumed.

$Function BACKEND vm_backend(STRING func, STRING arg = "")

- Returns a backend that will call into the current machine to produce a response.
- Produces 500 server error if there is no active machine, or an error happens.
- Call with no function specified if tenant has made a "backend" decision.

	if (riscv.want_result() == "backend") {
		set bereq.backend = riscv.vm_backend();
		return (hash);
	}

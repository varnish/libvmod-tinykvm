varnishtest "KVM: Minimal program example"

feature cmd "ls /dev/kvm"

shell {
cat >hello.c <<-EOF
#include "kvm_api.h"
#include <assert.h>
#include <string.h>
static int counter = 0;

int main(int argc, char **argv)
{
	struct kvm_request req;
	while (1) {
		wait_for_requests_paused(&req);

		if (IS_WARMUP_REQUEST(&req)) {
			assert(strcmp(req.url, "/warmup") == 0);
		} else {
			assert(strcmp(req.url, "/1") == 0);
		}

		int found_xkey = 0;
		int found_xkey2 = 0;
		for (int i = 0; i < req.num_headers; i++) {
			if (strcmp(req.headers[i].field, "X-Key: value") == 0) {
				found_xkey = 1;
			}
			if (strcmp(req.headers[i].field, "X-Key2: value2") == 0) {
				found_xkey2 = 1;
			}
		}
		assert(found_xkey == 1);
		assert(found_xkey2 == 1);
		assert(req.num_headers >= 2);

		char buffer[256];
		counter++;
		snprintf(buffer, sizeof(buffer), "Hello Compute World %d", counter);
		backend_response_str(200, "text/plain", buffer);
	}
}
EOF
gcc -static -O2 hello.c -I${testdir} -o hello
}

varnish v1 -vcl+backend {
vcl 4.1;
	import tinykvm;
	backend default none;

	sub vcl_init {
		tinykvm.configure("my_program",
		"""{
			"filename": "${tmpdir}/hello",
			"warmup": {
				"num_requests": 15,
				"exact": true,
				"url": "/warmup",
				"headers": [
					"Host: localhost",
					"X-Key: value",
					"X-Key2: value2"
				]
			}
		}""");
	}

	sub vcl_backend_fetch {
		set bereq.backend = tinykvm.program("my_program", bereq.url);
	}
} -start

client c1 {
	txreq -url "/1" -hdr "X-Key: value" -hdr "X-Key2: value2"
	rxresp
	expect resp.body == "Hello Compute World 16"
	expect resp.status == 200

	txreq -url "/1" -hdr "X-Key: value" -hdr "X-Key2: value2"
	rxresp
	expect resp.body == "Hello Compute World 16"
	expect resp.status == 200

	txreq -url "/1" -hdr "X-Key: value" -hdr "X-Key2: value2"
	rxresp
	expect resp.body == "Hello Compute World 16"
	expect resp.status == 200
} -run

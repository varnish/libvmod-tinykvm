varnishtest "KVM Backend: HTTP request test"

shell {
cat >${tmpdir}/${testname}.c <<-EOF
#include "kvm_api.h"
#include <assert.h>
#include <string.h>

static void on_request(const struct backend_request *req)
{
	assert(req->url_len == 2);

	assert(strcmp(req->arg, "argument") == 0);
	assert(req->arg_len == 8);

	if (strcmp(req->url, "/1") == 0)
	{
		assert(strcmp(req->method, "TEST") == 0);
		assert(req->method_len == 4);

		assert(strcmp(req->content_type, "") == 0);
		assert(req->content_type_len == 0);

		backend_response_str(200, "text/plain", "Hello World");
	}
	else if (strcmp(req->url, "/2") == 0)
	{
		assert(strcmp(req->method, "POST") == 0);
		assert(req->method_len == 4);

		assert(strcmp(req->content_type, "text/plain") == 0);
		assert(req->content_type_len == 10);

		assert(memcmp(req->content, "Hello World!", req->content_len) == 0);

		backend_response_str(200, "text/plain", "Hello World");
	}

	backend_response_str(500, "text/plain", "Failed");
}

int main(int argc, char **argv)
{
	set_backend_request(on_request);
	wait_for_requests();
}
EOF
gcc -static -O2 ${tmpdir}/${testname}.c -I${testdir} -o ${tmpdir}/${testname}
}

varnish v1 -vcl+backend {
vcl 4.1;
	import kvm;
	backend default none;

	sub vcl_init {
		kvm.embed_tenants("""{
			"test.com": {
				"filename": "${tmpdir}/${testname}",
				"group": "test"
			}
		}""");
	}

	sub vcl_recv {
		return (pass);
	}

	sub vcl_backend_fetch {
		set bereq.backend = kvm.vm_backend(
			bereq.http.Host,
			bereq.url,
			"argument");
	}
} -start

client c1 {
	txreq -req TEST -url "/1" -hdr "Host: test.com"
	rxresp
	expect resp.body == "Hello World"
	expect resp.status == 200

	txreq -req TEST2 -url "/1" -hdr "Host: test.com"
	rxresp
	expect resp.status == 500

	txreq -req TEST -url "/11" -hdr "Host: test.com"
	rxresp
	expect resp.status == 500

	txreq -req POST -url "/2" -hdr "Content-Type: text/plain" -hdr "Host: test.com"  -body "Hello World!"
	rxresp
	expect resp.body == "Hello World"
	expect resp.status == 200
} -run

$Module compute 3 "High-Performance Compute For Varnish Enterprise"

DESCRIPTION
===========

vmod_compute allows using libraries of sandboxed programs to safely
communicate with other systems, as well as retrieve and transform data
without having to worry about security and integrity issues.
Programs are loaded on-demand and can also be individually configured to
meet the specific needs of each Varnish Cache server.

A library defines a group of ready-to-use programs. Varnish Enterprise has
a list of officially supported programs, each of which solve a specific task.
Libraries contain definitions of programs that do not consume any resources
until a program is needed by a request. When a program is needed, it is
fetched, then loaded and then requests may be processed. This means that the
first requests to a program will be waiting.

Programs provided by a library are ready-to-use, and will often have one
single purpose. Programs are documented on the Varnish Software docs website
and comes with a simple explanation of what it does, and what JSON-
configuration should be provided to make the program perform a given function.

See http://compute.varnish-software.com for a list of official programs.

Example:
	sub vcl_init {
		new compvs = activedns.dns_group();
		compvs.set_host("compute.varnish-software.com");

		compute.library("https://.../compute.json");
	}

	sub vcl_backend_fetch {
		set bereq.backend = compute.backend("myprogram",
			"https://${compvs}/images/" + bereq.url);
	}

	This will employ 'myprogram' as a backend. DNS configuration can be
	handled using ActiveDNS, and uses the ${name} string-interpolation method.


The primary way to increase or decrease the resource consumption of a program
is to control the concurrency level. If a program is not handling requests fast
enough, increase the level. If the Varnish Cache is using too much CPU, try
reducing the concurrency level.

Example:
	sub vcl_init {
		compute.library("https://.../compute.json");
		compute.configure("myprogram", """{
			"concurrency": 32
		}""");
	}



API
===

$Event vmod_event

$Function BOOL library(PRIV_VCL, STRING uri)

- Fetch library of programs that is pre-installed with Varnish Enterprise.
- Libraries contain program definitions, but programs are only started on-demand.
- Must be called from vcl_init.

$Function BOOL add_program(PRIV_VCL, STRING name, STRING uri)

- Name is used to be able to refer to the program later, using configure, etc.
- URI can also be a local filename.
- Program is added to the default program. Use configure to override.
- Must be called from vcl_init.

$Function BOOL configure(PRIV_VCL, STRING program, STRING json)

- Provide a JSON configuration to override defaults to unstarted programs.
- Must be called from vcl_init.

$Function BOOL start(PRIV_VCL, STRING program, BOOL async = 1)

- Start program during early Varnish startup.
- When async, program intialization will not delay Varnish from starting up.
  Requests will wait until the program is fully initialized.
- Must be called from vcl_init.

$Function BACKEND program(PRIV_VCL, STRING program, STRING arg = "", STRING config = "")

- Returns a backend that will call the given program to produce a response.
- Supports GET, POST and other HTTP requests.
- Must be called from vcl_backend_fetch.

$Function BOOL chain(PRIV_VCL, STRING program, STRING arg = "", STRING config = "")

- Run requests through the backend *and then* each chained program.
- Must be called from vcl_backend_fetch.

varnishtest "KVM: Verify arguments passed to programs"

shell {
cat >${tmpdir}/${testname}.c <<-EOF
#include <assert.h>
#include <string.h>
#include "kvm_api.h"

int main(int argc, char **argv)
{
	assert(argc >= 3);
	assert(strcmp(argv[0], "xpizza.com") == 0);
	assert(strlen(argv[1]) > 0);
	assert(strcmp(argv[2], "request") == 0
		|| strcmp(argv[2], "storage") == 0);
	assert(strcmp(argv[3], "this") == 0);
	assert(strcmp(argv[4], "is") == 0);
	assert(strcmp(argv[5], "xpizza.com") == 0);
	assert(strcmp(getenv("FOO"), "bar") == 0);
	assert(strcmp(getenv("BAR"), "baz") == 0);
	// There are a few fixed environment variables set by the VMOD
	assert(strcmp(getenv("KVM_NAME"), "xpizza.com") == 0);
	assert(getenv("KVM_GROUP") != NULL);
	assert(getenv("KVM_TYPE") != NULL);
	assert(getenv("KVM_STATE") != NULL);
	assert(strcmp(getenv("KVM_DEBUG"), "0") == 0);
	// We need to give the gucci signal
	wait_for_requests();
}
EOF
gcc -static -O2 ${tmpdir}/${testname}.c -I${testdir} -o ${tmpdir}/${testname}
}

varnish v1 -vcl+backend {
vcl 4.1;
	import kvm;

	backend default none;

	sub vcl_init {
		kvm.embed_tenants("""
			{
				/* Comments are enabled. */
				"xpizza.com": {
					"filename": "${tmpdir}/${testname}",
					"main_arguments": [
						"this",
						"is",
						"xpizza.com"
					],
					"environment": [
						"FOO=bar",
						"BAR=baz"
					]
				}
			}
		""");
	}

	sub vcl_recv {
		if (kvm.tenant_is_ready("xpizza.com")) {
			return (synth(404, "Tenant is ready"));
		} else {
			return (synth(500, "Tenant is *not* ready"));
		}
	}
} -start

client c1 {
	txreq -url "/" -hdr "Host: xpizza.com"
	rxresp
	expect resp.status == 404
} -run

varnishtest "KVM Backend: Basic live update test"

shell {
cat >${tmpdir}/${testname}.c <<-EOF
#include <string.h>
#include "kvm_api.h"

static int counter = 0;
static void my_storage(size_t n, struct virtbuffer buffers[n], size_t reslen)
{
	struct virtbuffer *hello_string = &buffers[0];
	counter ++;
	((char *)hello_string->data)[11] = '0' + (counter % 10);
	/* Data contains the inputs */
	storage_return(hello_string->data, hello_string->len);
}

static void my_backend(const char *arg)
{
	const struct virtbuffer buffers[1] = {
		{.data = TRUST_ME(arg), .len = strlen(arg)}
	};
	char result[256];
	const long rlen =
		storage_callv(my_storage, 1, buffers, result, sizeof(result));

	const char ctype[] = "text/plain";
	backend_response(200, ctype, sizeof(ctype)-1, result, rlen);
}

int main()
{
	set_backend_get(my_backend);
	wait_for_requests();
}
EOF
gcc -static -O2 -s ${tmpdir}/${testname}.c -I${testdir} -o ${tmpdir}/${testname}
}

varnish v1 -vcl+backend {
vcl 4.1;
	import kvm;

	backend default none;

	sub vcl_init {
		kvm.embed_tenants("""{
			"xpizza.com": {
				"filename": "${tmpdir}/${testname}",
				"key": "1",
				"group": "test",
				"storage": true
			}
		}""");
	}

	sub vcl_recv {
		if (req.url == "/1") {
			if (kvm.live_update_file(req.http.Host, "${tmpdir}/${testname}")) {
				return (synth(201));
			} else {
				return (synth(403));
			}
		}
		else if (req.url == "/2") {
			if (kvm.live_update_file(req.http.Host, "${tmpdir}/missing_file")) {
				return (synth(201));
			} else {
				return (synth(403));
			}
		}
		return (pass);
	}

	sub vcl_backend_fetch {
		if (bereq.http.X-PostKey) {
			/* Live update POST */
			set bereq.backend = kvm.live_update(
				bereq.http.Host, bereq.http.X-PostKey, 20MB);
			return (fetch);
		}
		set bereq.backend = kvm.vm_backend(
			bereq.http.Host,
			bereq.url);
	}
} -start

define m1 sanity_check {
	txreq -url "/helloworldZ" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "/helloworld1"
	expect resp.status == 200
	txreq -url "/helloworldZ" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "/helloworld2"
	expect resp.status == 200
	txreq -url "/helloworldZ" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "/helloworld3"
	expect resp.status == 200
}

client c1 {
	${m1_sanity_check}

	# We can live update directly from the local filesystem
	# And we can use VCL to control the response status
	txreq -url "/1" -hdr "Host: xpizza.com"
	rxresp
	expect resp.status == 201

	${m1_sanity_check}

	# Missing file is a 403 because the live update fails
	txreq -url "/2" -hdr "Host: xpizza.com"
	rxresp
	expect resp.status == 403

	# Valid key is a successful live update
	txreq -hdr "Host: xpizza.com" -hdr "X-PostKey: 1" -bodyfrom "${tmpdir}/${testname}"
	rxresp
	expect resp.status == 201

	${m1_sanity_check}

	# Invalid key is a failing request
	txreq -hdr "Host: xpizza.com" -hdr "X-PostKey: 2" -bodyfrom "${tmpdir}/${testname}"
	rxresp
	expect resp.status == 503

	# Cannot use sanity check macro, as the program is unchanged
	txreq -url "/helloworldZ" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "/helloworld4"
	txreq -url "/helloworldZ" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "/helloworld5"
	txreq -url "/helloworldZ" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "/helloworld6"
} -run

varnishtest "KVM Backend: Shared memory test"

shell {
cat >${tmpdir}/${testname}.c <<-EOF
#include <stdio.h>
#include "kvm_api.h"
static int *counter = NULL;

static void my_backend(const char *url, const char *arg)
{
	// Atomically increment the counter
	int c = __sync_fetch_and_add(counter, 1);
	char result[256];
	const long rlen = snprintf(result, sizeof(result), "Hello World %d", c);

	const char ctype[] = "text/plain";
	backend_response(200, ctype, sizeof(ctype)-1, result, rlen);
}

int main()
{
	/* Create a shared counter */
	counter = SHM_ALLOC_TYPE(int);

	set_backend_get(my_backend);
	wait_for_requests();
}
EOF
gcc -static -O2 -s ${tmpdir}/${testname}.c -I${testdir} -o ${tmpdir}/${testname}
}

varnish v1 -vcl+backend {
vcl 4.1;
	import kvm;

	backend default none;

	sub vcl_init {
		kvm.embed_tenants("""{
			"xpizza.com": {
				"filename": "${tmpdir}/${testname}",
				"shared_memory": 2
			}
		}""");
	}

	sub vcl_recv {
		if (req.url == "/1") {
			if (kvm.live_update_file(req.http.Host, "${tmpdir}/${testname}")) {
				return (synth(201));
			} else {
				return (synth(403));
			}
		}
		else if (req.url == "/2") {
			if (kvm.live_update_file(req.http.Host, "${tmpdir}/missing_file")) {
				return (synth(201));
			} else {
				return (synth(403));
			}
		}
		return (pass);
	}

	sub vcl_backend_fetch {
		if (bereq.http.X-PostKey) {
			/* Live update POST */
			set bereq.backend = kvm.live_update(
				bereq.http.Host, bereq.http.X-PostKey, 20MB);
			return (fetch);
		}
		set bereq.backend = kvm.vm_backend(
			bereq.http.Host,
			bereq.url);
	}
} -start


client c1 {
	txreq -url "/" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "Hello World 0"
	expect resp.status == 200
	txreq -url "/" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "Hello World 1"
	expect resp.status == 200
	txreq -url "/" -hdr "Host: xpizza.com"
	rxresp
	expect resp.body == "Hello World 2"
	expect resp.status == 200
} -run

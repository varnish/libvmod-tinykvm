varnishtest "Test headerplus.collapse/collapse_regex()"

varnish v1 -vcl+backend {
	import headerplus;

	backend default none;

	sub vcl_recv {
		return (synth(200));
	}

	sub vcl_synth {
		if (!req.http.delim) {
			set req.http.delim = ", ";
		}
		headerplus.init(req);
		headerplus.add("test", "inside");
		if (req.http.re) {
			set resp.http.c1 = headerplus.count_regex("test\d?");
			set resp.http.out = headerplus.collapse_regex("test\d?", "new-name", req.http.delim);
			set resp.http.c2 = headerplus.count_regex("test\d?");
			set resp.http.c3 = headerplus.count("new-name");
		} else if (req.http.nn) {
			set resp.http.c1 = headerplus.count("test");
			set resp.http.out = headerplus.collapse("test", "new-name", req.http.delim);
			set resp.http.c2 = headerplus.count("test");
			set resp.http.c3 = headerplus.count("new-name");
		} else {
			set resp.http.c1 = headerplus.count("test");
			set resp.http.out = headerplus.collapse("test", delim = req.http.delim);
			set resp.http.c2 = headerplus.count("test");
		}
		headerplus.write();
		set resp.http.test = req.http.test;
		set resp.http.new-name = req.http.new-name;
	}

} -start

client c1 {
	txreq
	rxresp
	expect resp.http.out == "inside"
	expect resp.http.test == resp.http.out
	expect resp.http.c1 == 1
	expect resp.http.c2 == 1

	txreq -hdr "test: a"
	rxresp
	expect resp.http.out == "a, inside"
	expect resp.http.test == resp.http.out
	expect resp.http.c1 == 2
	expect resp.http.c2 == 1

	txreq -hdr "test: a" -hdr "test:b " -hdr "test:ing" -hdr "test: d"
	rxresp
	expect resp.http.out == "a, b, ing, d, inside"
	expect resp.http.test == resp.http.out
	expect resp.http.c1 == 5
	expect resp.http.c2 == 1

	txreq -hdr "test: a" -hdr "test:b " -hdr "test:ing" -hdr "test: d" -hdr "nn: true"
	rxresp
	expect resp.http.out == "a, b, ing, d, inside"
	expect resp.http.new-name == resp.http.out
	expect resp.http.c1 == 5
	expect resp.http.c2 == 0
	expect resp.http.c3 == 1

	txreq -hdr "test: a" -hdr "test:b " -hdr "test:ing" -hdr "test: d" -hdr "delim: ;"
	rxresp
	expect resp.http.out == "a;b;ing;d;inside"
	expect resp.http.test == resp.http.out
	expect resp.http.c1 == 5
	expect resp.http.c2 == 1

	txreq -hdr "re: true"
	rxresp
	expect resp.http.out == "inside"
	expect resp.http.test == ""
	expect resp.http.new-name == "inside"
	expect resp.http.c1 == 1
	expect resp.http.c2 == 0
	expect resp.http.c3 == 1

	txreq -hdr "test1: a" -hdr "re: true"
	rxresp
	expect resp.http.out == "a, inside"
	expect resp.http.test == ""
	expect resp.http.new-name == resp.http.out 
	expect resp.http.c1 == 2
	expect resp.http.c2 == 0
	expect resp.http.c3 == 1

	txreq -hdr "test: a" -hdr "test1:b " -hdr "test2:ing" -hdr "test3: d" -hdr "re: true"
	rxresp
	expect resp.http.out == "a, b, ing, d, inside"
	expect resp.http.test == ""
	expect resp.http.new-name == resp.http.out 
	expect resp.http.c1 == 5
	expect resp.http.c2 == 0
	expect resp.http.c3 == 1

	txreq -hdr "test: a" -hdr "test1:b " -hdr "test2:ing" -hdr "test3: d" -hdr "re: true" -hdr "delim: ;"
	rxresp
	expect resp.http.out == "a;b;ing;d;inside"
	expect resp.http.test == ""
	expect resp.http.new-name == resp.http.out 
	expect resp.http.c1 == 5
	expect resp.http.c2 == 0
	expect resp.http.c3 == 1

} -run

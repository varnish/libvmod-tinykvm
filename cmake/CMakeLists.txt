cmake_minimum_required (VERSION 3.0.2)
project (varnish C)

option(VARNISH_PLUS "Build with the varnish plus repo" ON)
option(GPROF       "Enable profiling with gprof" OFF)
option(LTO_ENABLE  "Enable LTO builds" OFF)
option(MINIMAL     "Minimal build")
option(GCSECTIONS  "Garbage collect empty sections" ON)
option(NATIVE      "Enable native performance" ON)
option(SANITIZE    "Enable asan/ubsan sanitizers" OFF)
option(PGO_ENABLE  "Enable profile-guided optimizations" OFF)
option(PGO_GENERATE "Enable profile-guided optimizations" ON)
option(AUTOFDO     "Enable AutoFDO profile optimizations" OFF)
set(PROFILE "../perf.afdo" CACHE STRING "Optimization profile path")
option(LIBFUZZER   "Enable fuzzing with clang libfuzzer")
option(LIBCPP      "Enable compiling with libc++ and linking with LLD" OFF)
option(SINGLE_PROCESS "Disable fork() and run in single-process mode" ON)

set(CMAKE_C_FLAGS "-Wall -Wextra -std=c11 -g -O2")

if (LTO_ENABLE)
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto=thin")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto=thin -fuse-ld=lld")
    else()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto=8")
    endif()
endif()

if (GPROF)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
endif()

if (MINIMAL)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Os")
endif()

if (NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native")
endif()

if (SANITIZE)
    set(SANITIZE_FLAGS -fsanitize=address,undefined)
endif()

if (PGO_ENABLE)
    set(PGO_DIR "${CMAKE_BINARY_DIR}/pgo")
	if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    	set(PGO_FLAGS "-fprofile-correction -fprofile-dir=${PGO_DIR}")
		if (PGO_GENERATE)
	        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-generate ${PGO_FLAGS}")
	    else()
	        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-use ${PGO_FLAGS}")
	    endif()
	elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
		# With clang we will have to merge the profdata using llvm-profdata merge
		# before we can use the profdata generated from profile-generate
		if (PGO_GENERATE)
	        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-generate=${PGO_DIR}")
	    else()
	        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-use=default.profdata")
	    endif()
	endif()
endif()

if (AUTOFDO)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fauto-profile=${CMAKE_BINARY_DIR}/${PROFILE} -g1")
endif()

if (GCSECTIONS)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffunction-sections -fdata-sections")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-gc-sections")
endif()

if (VARNISH_PLUS)
  set (VARNISH_PATH ${CMAKE_SOURCE_DIR}/../ext/varnish-cache-plus)
else()
  set (VARNISH_PATH ${CMAKE_SOURCE_DIR}/../ext/varnish-cache)
endif()
# TODO: generate this folder and config.h instead
set (CONFIG_PATH ${CMAKE_SOURCE_DIR}/include)

add_subdirectory(libvarnish  libvarnish)
add_subdirectory(libvapi     libvarnishapi)
add_subdirectory(libvgz      libvgz)
add_subdirectory(varnishd    build_varnishd)
add_subdirectory(varnishtest build_varnishtest)
add_subdirectory(varnishadm  build_varnishadm)
add_subdirectory(varnishlog  build_varnishlog)
add_subdirectory(varnishhist build_varnishhist)
add_subdirectory(varnishtop  build_varnishtop)
add_subdirectory(varnishncsa build_varnishncsa)
add_subdirectory(varnishstat build_varnishstat)
if (VARNISH_PLUS)
	add_subdirectory(varnishscoreboard build_scoreboard)
endif()

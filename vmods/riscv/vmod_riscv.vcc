$Module riscv 3 "RISC-V Sandbox For VCL"

DESCRIPTION
===========

vmod_riscv allows executing 32-bit RISC-V binaries and returns their output.

API
===

$Function STRING exec(HTTP req, INT max_instructions, BLOB elf)

Execute the given ELF binary, running its main function to completion or runs out of instructions limited by max_instructions. This will also initialize the machine, and may call destructors before exiting.

- All measurements are stored in several HTTP header fields
- Errors are stored in a X-Exception header field.
- If an error occurs the return value is null (empty).
- On success the machine output is returned.

$Object backend(INT max_instructions = 2000000, STRANDS arguments = 0)

$Method BACKEND .from_body()


$Object machine(STRING name, STRING filename, INT max_instructions = 2000000, STRANDS arguments = 0)

- Create named machine that is initialized immediately
- Arguments are passed into the main() function

$Method INT     .call(STRING function)

- Call into a new virtual machine quickly forked from the previously
  prepared machine, using copy-on-write mechanics.


$Function BOOL    machine_present()

- Returns true if there is a currently active machine.

$Function INT     call(STRING function)

- Calls the given function in the currently active machine.

$Function STRING  current_name()

- Returns the name of the currently active (last running) machine.
- If no machine has been running in the current stage of VCL,
  this function will return null, which can be tested in if statements.

$Function STRING  want_result()

- Returns the VCL decision that the guest wants to happen:
  Lookup, Synth, etc.

$Function INT     want_status()

- Returns the status code that the guest wants to use, if relevant.

